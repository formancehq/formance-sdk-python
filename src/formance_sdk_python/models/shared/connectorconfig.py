"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .adyenconfig import AdyenConfig, AdyenConfigTypedDict
from .atlarconfig import AtlarConfig, AtlarConfigTypedDict
from .bankingcircleconfig import BankingCircleConfig, BankingCircleConfigTypedDict
from .currencycloudconfig import CurrencyCloudConfig, CurrencyCloudConfigTypedDict
from .dummypayconfig import DummyPayConfig, DummyPayConfigTypedDict
from .genericconfig import GenericConfig, GenericConfigTypedDict
from .mangopayconfig import MangoPayConfig, MangoPayConfigTypedDict
from .modulrconfig import ModulrConfig, ModulrConfigTypedDict
from .moneycorpconfig import MoneycorpConfig, MoneycorpConfigTypedDict
from .stripeconfig import StripeConfig, StripeConfigTypedDict
from .wiseconfig import WiseConfig, WiseConfigTypedDict
from formance_sdk_python.utils import get_discriminator
from pydantic import Discriminator, Tag
from typing import Union
from typing_extensions import Annotated, TypeAliasType


ConnectorConfigTypedDict = TypeAliasType(
    "ConnectorConfigTypedDict",
    Union[
        WiseConfigTypedDict,
        StripeConfigTypedDict,
        GenericConfigTypedDict,
        ModulrConfigTypedDict,
        CurrencyCloudConfigTypedDict,
        MangoPayConfigTypedDict,
        MoneycorpConfigTypedDict,
        AdyenConfigTypedDict,
        DummyPayConfigTypedDict,
        AtlarConfigTypedDict,
        BankingCircleConfigTypedDict,
    ],
)


ConnectorConfig = Annotated[
    Union[
        Annotated[AdyenConfig, Tag("Adyen")],
        Annotated[AtlarConfig, Tag("Atlar")],
        Annotated[BankingCircleConfig, Tag("Bankingcircle")],
        Annotated[CurrencyCloudConfig, Tag("Currencycloud")],
        Annotated[DummyPayConfig, Tag("Dummypay")],
        Annotated[GenericConfig, Tag("Generic")],
        Annotated[MangoPayConfig, Tag("Mangopay")],
        Annotated[ModulrConfig, Tag("Modulr")],
        Annotated[MoneycorpConfig, Tag("Moneycorp")],
        Annotated[StripeConfig, Tag("Stripe")],
        Annotated[WiseConfig, Tag("Wise")],
    ],
    Discriminator(lambda m: get_discriminator(m, "provider", "provider")),
]
