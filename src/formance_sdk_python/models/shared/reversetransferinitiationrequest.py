"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from formance_sdk_python.types import BaseModel, Nullable, UNSET_SENTINEL
from formance_sdk_python.utils import validate_int
from pydantic import model_serializer
from pydantic.functional_validators import BeforeValidator
from typing import Dict
from typing_extensions import Annotated, TypedDict


class ReverseTransferInitiationRequestTypedDict(TypedDict):
    amount: int
    asset: str
    description: str
    metadata: Nullable[Dict[str, str]]
    reference: str


class ReverseTransferInitiationRequest(BaseModel):
    amount: Annotated[int, BeforeValidator(validate_int)]

    asset: str

    description: str

    metadata: Nullable[Dict[str, str]]

    reference: str

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["metadata"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
