"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from formance_sdk_python.types import BaseModel
from formance_sdk_python.utils import validate_int
import pydantic
from pydantic.functional_validators import BeforeValidator
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class MetadataTypedDict(TypedDict):
    r"""A set of key/value pairs that you can attach to a transfer object.
    It can be useful for storing additional information about the transfer in a structured format.

    """


class Metadata(BaseModel):
    r"""A set of key/value pairs that you can attach to a transfer object.
    It can be useful for storing additional information about the transfer in a structured format.

    """


class ActivityStripeTransferTypedDict(TypedDict):
    amount: NotRequired[int]
    asset: NotRequired[str]
    connector_id: NotRequired[str]
    destination: NotRequired[str]
    metadata: NotRequired[MetadataTypedDict]
    r"""A set of key/value pairs that you can attach to a transfer object.
    It can be useful for storing additional information about the transfer in a structured format.

    """
    waiting_validation: NotRequired[bool]


class ActivityStripeTransfer(BaseModel):
    amount: Annotated[Optional[int], BeforeValidator(validate_int)] = None

    asset: Optional[str] = None

    connector_id: Annotated[Optional[str], pydantic.Field(alias="connectorID")] = None

    destination: Optional[str] = None

    metadata: Optional[Metadata] = None
    r"""A set of key/value pairs that you can attach to a transfer object.
    It can be useful for storing additional information about the transfer in a structured format.

    """

    waiting_validation: Annotated[
        Optional[bool], pydantic.Field(alias="waitingValidation")
    ] = False
