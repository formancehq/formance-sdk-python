"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .v2transaction import V2Transaction, V2TransactionTypedDict
from formance_sdk_python.types import BaseModel
from formance_sdk_python.utils import get_discriminator
import pydantic
from pydantic import Discriminator, Tag
from typing import Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class V2BulkElementResultErrorTypedDict(TypedDict):
    error_code: str
    error_description: str
    log_id: int
    response_type: str
    error_details: NotRequired[str]


class V2BulkElementResultError(BaseModel):
    error_code: Annotated[str, pydantic.Field(alias="errorCode")]

    error_description: Annotated[str, pydantic.Field(alias="errorDescription")]

    log_id: Annotated[int, pydantic.Field(alias="logID")]

    response_type: Annotated[str, pydantic.Field(alias="responseType")]

    error_details: Annotated[Optional[str], pydantic.Field(alias="errorDetails")] = None


class V2BulkElementResultDeleteMetadataTypedDict(TypedDict):
    log_id: int
    response_type: str


class V2BulkElementResultDeleteMetadata(BaseModel):
    log_id: Annotated[int, pydantic.Field(alias="logID")]

    response_type: Annotated[str, pydantic.Field(alias="responseType")]


class V2BulkElementResultRevertTransactionTypedDict(TypedDict):
    data: V2TransactionTypedDict
    log_id: int
    response_type: str


class V2BulkElementResultRevertTransaction(BaseModel):
    data: V2Transaction

    log_id: Annotated[int, pydantic.Field(alias="logID")]

    response_type: Annotated[str, pydantic.Field(alias="responseType")]


class V2BulkElementResultAddMetadataTypedDict(TypedDict):
    log_id: int
    response_type: str


class V2BulkElementResultAddMetadata(BaseModel):
    log_id: Annotated[int, pydantic.Field(alias="logID")]

    response_type: Annotated[str, pydantic.Field(alias="responseType")]


class V2BulkElementResultCreateTransactionTypedDict(TypedDict):
    data: V2TransactionTypedDict
    log_id: int
    response_type: str


class V2BulkElementResultCreateTransaction(BaseModel):
    data: V2Transaction

    log_id: Annotated[int, pydantic.Field(alias="logID")]

    response_type: Annotated[str, pydantic.Field(alias="responseType")]


V2BulkElementResultTypedDict = TypeAliasType(
    "V2BulkElementResultTypedDict",
    Union[
        V2BulkElementResultAddMetadataTypedDict,
        V2BulkElementResultDeleteMetadataTypedDict,
        V2BulkElementResultCreateTransactionTypedDict,
        V2BulkElementResultRevertTransactionTypedDict,
        V2BulkElementResultErrorTypedDict,
    ],
)


V2BulkElementResult = Annotated[
    Union[
        Annotated[V2BulkElementResultAddMetadata, Tag("ADD_METADATA")],
        Annotated[V2BulkElementResultCreateTransaction, Tag("CREATE_TRANSACTION")],
        Annotated[V2BulkElementResultDeleteMetadata, Tag("DELETE_METADATA")],
        Annotated[V2BulkElementResultError, Tag("ERROR")],
        Annotated[V2BulkElementResultRevertTransaction, Tag("REVERT_TRANSACTION")],
    ],
    Discriminator(lambda m: get_discriminator(m, "response_type", "responseType")),
]
