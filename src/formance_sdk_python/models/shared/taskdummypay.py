"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .taskstatus import TaskStatus
from datetime import datetime
from formance_sdk_python.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class TaskDummyPayDescriptorTypedDict(TypedDict):
    file_name: NotRequired[str]
    key: NotRequired[str]
    name: NotRequired[str]


class TaskDummyPayDescriptor(BaseModel):
    file_name: Annotated[Optional[str], pydantic.Field(alias="fileName")] = None

    key: Optional[str] = None

    name: Optional[str] = None


class TaskDummyPayStateTypedDict(TypedDict):
    pass


class TaskDummyPayState(BaseModel):
    pass


class TaskDummyPayTypedDict(TypedDict):
    connector_id: str
    created_at: datetime
    descriptor: TaskDummyPayDescriptorTypedDict
    id: str
    status: TaskStatus
    updated_at: datetime
    error: NotRequired[str]
    state: NotRequired[Nullable[TaskDummyPayStateTypedDict]]


class TaskDummyPay(BaseModel):
    connector_id: Annotated[str, pydantic.Field(alias="connectorID")]

    created_at: Annotated[datetime, pydantic.Field(alias="createdAt")]

    descriptor: TaskDummyPayDescriptor

    id: str

    status: TaskStatus

    updated_at: Annotated[datetime, pydantic.Field(alias="updatedAt")]

    error: Optional[str] = None

    state: OptionalNullable[TaskDummyPayState] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["error", "state"]
        nullable_fields = ["state"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
