"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import v2posttransaction as shared_v2posttransaction
from ..shared import v2targetid as shared_v2targetid
from ..shared import v2targettype as shared_v2targettype
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Dict, Optional, Union


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class V2BulkElementV2BulkElementDeleteMetadataData:
    key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('key') }})
    target_id: Union[str, int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetId') }})
    target_type: shared_v2targettype.V2TargetType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetType') }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class V2BulkElementV2BulkElementDeleteMetadata:
    action: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action') }})
    data: Optional[V2BulkElementV2BulkElementDeleteMetadataData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    ik: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ik'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class V2BulkElementV2BulkElementRevertTransactionData:
    id: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id') }})
    force: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('force'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class V2BulkElementV2BulkElementRevertTransaction:
    action: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action') }})
    data: Optional[V2BulkElementV2BulkElementRevertTransactionData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    ik: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ik'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class V2BulkElementV2BulkElementAddMetadataData:
    metadata: Dict[str, str] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('metadata') }})
    target_id: Union[str, int] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetId') }})
    target_type: shared_v2targettype.V2TargetType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetType') }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class V2BulkElementV2BulkElementAddMetadata:
    action: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action') }})
    data: Optional[V2BulkElementV2BulkElementAddMetadataData] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    ik: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ik'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class V2BulkElementV2BulkElementCreateTransaction:
    action: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('action') }})
    data: Optional[shared_v2posttransaction.V2PostTransaction] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data'), 'exclude': lambda f: f is None }})
    ik: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ik'), 'exclude': lambda f: f is None }})
    



@dataclasses.dataclass
class V2BulkElement:
    pass
